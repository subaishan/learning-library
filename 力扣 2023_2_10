给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
每个右括号都有一个对应的相同类型的左括号。
 

示例 1：

输入：s = "()"
输出：true
示例 2：

输入：s = "()[]{}"
输出：true
示例 3：

输入：s = "(]"
输出：false

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/valid-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

执行用时：4 ms, 在所有 C++ 提交中击败了34.95%的用户
内存消耗：6.4 MB, 在所有 C++ 提交中击败了5.11%的用户

class Solution {
public:
    stack<char> type;
    unordered_map<char,int> m = {
        {' ',0},
        {'(',1},
        {')',2},
        {'{',3},
        {'}',4},
        {'[',5},
        {']',6}
    };

    bool isValid(string s) {
        int value = 0;
        int num = 0;
        int j = 0;
        for(int i = 0; i < s.length(); i++)
        {
            value = m[s[i]];
            j = value - 1;
            if(value % 2 == 1)
            {
                type.push(s[i]);
                num = value;
            }
            else
            {
                if(num == j)
                {
                    type.pop();
                    if(type.empty())
                    {
                        if(i==(s.length()-1))
                        return true;
                        num = 0;
                    }
                    else{
                        num = m[type.top()];
                    }
                }
                else
                {
                    return false;
                }
            }
        }
        if(type.empty())
        return true;
        return false;
    }
};

给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

请必须使用时间复杂度为 O(log n) 的算法。

 

示例 1:

输入: nums = [1,3,5,6], target = 5
输出: 2
示例 2:

输入: nums = [1,3,5,6], target = 2
输出: 1
示例 3:

输入: nums = [1,3,5,6], target = 7
输出: 4

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/search-insert-position
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size();
        int l=0,r=n-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]<target)
                l=mid+1;
            else r=mid-1;
        }
        return l;
    }
};
